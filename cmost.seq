/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file     cmost.seq
 * @brief    sequence file for CMOS imager 4k x 2k
 * @author   Stephen Kaye and Timothee Greffe
 * @date     2020-01-08 Initial creation
 * @modified 
 *
 */

/** ---------------------------------------------------------------------------
 * parameter definitions
 * syntax: param paramname=value
*/

param exptime=0 
param Expose=0
param mode_TrueGR=0
param mode_dCDS=0
param mode_RR=0
param Abort=0
param DarkRows=_DARK_ROWS
param MaxRows=_MAX_ROWS
param GainLow=0
param GainHigh=1
param numsamples=_NUM_CDS_SAMPLES
param TPixel_hold=5

/* There are 4 parallel outputs per 1024 pixel block.  The x address       */
/* increases to 256 and then resets, this should cover all of the columns. */


/** ---------------------------------------------------------------------------
 * @fn     SetupCmos
 * @brief  This executes on start-up and sets levels to initialize CMOS array.
 *
 */
SEQUENCE SetupCmos {
  wSetRSTMIMClock();  /* This keeps the other rows out of reset */
  wLowSampCaps1();    /* Not using CDS, so leave sample capacitors disconnected */
  wLowSampCaps2();    /* Not ping pong operation, so leave these low */
  wResetXYAddr();     /* Reset the addresses */
  wLowDarkPixEn();  /* Get out of dark pixel enable mode */
  GlobalReset();      /* Global reset of device, now roll the shutter while waiting for exp */
}

/* And we'll fall into the wait for exposure routine                      */
/* We will be doing a rolling shutter */


/** ---------------------------------------------------------------------------
 * @fn	    WaitForExposure
 * @brief   Here we wait until the host asks for an image
 */

SEQUENCE WaitForExpose {
  if Expose SelectReadoutMode();
  GlobalReset();/* Apply Global Reset to the Array */          
  GOTO WaitForExpose();
}
SEQUENCE SelectReadoutMode {
  if mode_TrueGR TrueGR_Readout(Expose);
  if mode_dCDS PseudoGR_Readout(Expose);
  if mode_RR Start_RR_seq();
  GOTO WaitForExpose(); 
}

/** ---------------------------------------------------------------------------
 * @fn	    Rolling Reset
 * @brief   A first ghost frame is readout to start the sequence in the correct rolling reset state
 */
  SEQUENCE Start_RR_seq {
 Expose--;
 RR_dCDS_Readout();
 RR_seq(Expose);
return;
 }
 
 SEQUENCE RR_seq {
 Expose--;

 SetIPIXOff();
  MilliSec(exptime); 
 SetIPIXOn(); 
 wDelay1ms(10);
 RR_dCDS_Readout();
return;
 }
 

  SEQUENCE RR_dCDS_Readout {
  wFrame();
  /* Read out the dark rows first */ 
  wSetDarkPixEn();wDelay1ms(5);
   wResetXYAddr();/* Reset the X and Y addresses  */
   wDelay1us(1);
  wPulseYAddr();wDelay1us(5000);
  ReadRowRR(DarkRows);
 wLowDarkPixEn();wDelay1ms(5);
 /* Now read the active pixels */
  wResetXYAddr();/* Reset the X and Y addresses  */
   wDelay1us(1);
  wPulseYAddr();wDelay1us(5000);
  ReadRowRR(MaxRows);  /* Go through all the rows, each raw output has 256 columns associated */ 
 return;
 }
 
 
 SEQUENCE ReadRowRR{
 wLine();                   /* Trigger a new line */

 wSetRowClock();            /* Sets row clock - buffered sense node voltage driven on to column bus   */
 wDelay10ns(50);
                  
  if GainHigh GOTO ResetRowHG(); /* This resets the row's sense node and sets to high gain mode, 1us width */
  if GainLow GOTO ResetRowLG();  /* This resets the row's sense node and sets to low gain mode, 1us width  */


/* We should have the reset level here and are clamping on the reset level */
 ADClamp();     /* Do a clamp for each line */
 wDelay1us(1); /* Hold for 50 us */
 ADClamp_();    /* Unclamp the ADCs         */

 wDelay1us(10);
 ReadPixRaw(256);  /* Read Reference reset level */

 wTGPulse_RR();/* Pulse the transfer gate to move charge to sense node, 10us wide        */
 wDelay1us(10);
 ReadPixRaw(256);         /* Reads the Signal Level */
/*RollingReset();*/
 wLowRowClock(); 
 
  /* The FPGA will need to handle the roll over and enable the next Y Block */
  wPulseYAddr();    /* FPGA controls DV_IN[], Y_ENABLE_BLOCK[], and Y_LATCH through counter/FPGA    */
  wDelay1us();      /* Delay between Y Latch and the reset of the first pixel which happens on next iteration */
  return;
 }

/** ---------------------------------------------------------------------------
 * @fn	    True Global Reset
 * @brief   Both the Reset and charge transfer are done Globally
 */ 
 
SEQUENCE TrueGR_Readout {
  Expose--;
  GlobalReset();
  MilliSec(exptime); /* Wait the exposure time */
  GlobalTransfer();
  wFrame();
  /* Need to latch X and Y address at 0, counter reset also create latch signal in FPGA?     */
  /* Don't worry about the rolling shutter yet, just start at corner of device */
  wSetDarkPixEn(); /* Read out the dark rows first */
  wResetXYAddr();  /* Reset the X and Y addresses  */
wDelay10ns(10);  
wPulseYAddr();

  ReadRowRaw(DarkRows);
  wLowDarkPixEn(); /* Get out of dark pixel enable mode */

  /* Now read the active pixels */
  wResetXYAddr();  /* Reset the X and Y address counters - can this also create a latch in FPGA? */
wDelay10ns(10); 
wPulseYAddr();  
/*wSetAllXBlocks();*/ /* With 16 ADC inputs enable all 4 X blocks - this done in FPGA          */

  ReadRowRaw(MaxRows);  /* Go through all the rows, each raw output has 256 columns associated */

  return;
}

SEQUENCE ReadRowRaw {
  wLine();                  /* Trigger a new line */

 wSetRowClock();           /* Sets row clock - buffered sense node voltage driven on to column bus   */
  wDelay10ns(50);
  /*wSetClampClock();*/     /* Resets the cds capacitor to the clamp voltage                          */
 /* if GainHigh GOTO ResetRowHG();*/ /* This resets the row's sense node and sets to high gain mode, 1us width */
/*  if GainLow GOTO ResetRowLG();*//* This resets the row's sense node and sets to low gain mode, 1us width  */


 wSetRowClock();
wDelay10ns(5);  /* Delay between reset and the ADC clamping, this is probably unnecessary */

/* We should have the reset level here and are clamping on the reset level */
  ADClamp();     /* Do a clamp for each line */
  wDelay1us(50); /* Hold for 50 us */
  ADClamp_();    /* Unclamp the ADCs         */
  
  /*wDelay1us(25);*/            /* Delay to see the reset level */
  /*wDelay1us(2);*/             /* Delay between clamp going low to TG going high 2us - nominal value */
 
wDelay1us(1);
/* wLowRowClock(); */
/*wDelay1us(1);*/
/*wSetRowClock();*/               
/*wDelay1us(1);*/
 /*wTGPulse();*//* Pulse the transfer gate to move charge to sense node, 10us wide        */
 wDelay1us(1);
  /*wDelay1us(25);*/            /* Delay to see the charge level */
  /*wDelay1us(2);*/             /* Need 2us nom. delay between TG pulse low and the sample cap going high */
  /*wSetSampCaps1();*/           /* Sample A and Sample B both high - simple straight through operation    */
  /* All the pixels in the row are ready to read now.  Go Read all of the pixels                      */
  ReadPixRaw(256);         /* Reads the whole X Block, FPGA will have to increment OUTPUT_MUX_ENABLE[0,1]  */
  /*LowSampCaps1();*/
  wDelay1us(2);
  wLowRowClock(); 
  /* Do all the pixels and then increment the row address */
  /* The FPGA will need to handle the roll over and enable the next Y Block */
  wPulseYAddr();    /* FPGA controls DV_IN[], Y_ENABLE_BLOCK[], and Y_LATCH through counter/FPGA    */
  wDelay1us();      /* Delay between Y Latch and the reset of the first pixel which happens on next iteration */
  return;
}

SEQUENCE ReadPixRaw {
  wPixel();               /* start the pixel CDS samples clock */
  wPulseXAddr(); /* Increment the X address 50 ns width          */
  wDelay10ns(TPixel_hold);  /* Do nothing while getting samples of the CDS signal */
  return;
}
SEQUENCE ReadPixRaw_Blank {
  wDelay10ns(1);
  wPulseXAddr(); /* Increment the X address 50 ns width          */
  wDelay10ns(TPixel_hold);  /* Do nothing while getting samples of the CDS signal */
  return;
}

/** ---------------------------------------------------------------------------
 * @fn	    Pseudo Global Reset
 * @brief   Exposure starts with a Global Reset but the rows are then readout twice with a rolling transfer.
 */

SEQUENCE PseudoGR_Readout {
  Expose--;
  GlobalReset();
  MilliSec(exptime); /* Wait the exposure time */
  wFrame();
  /* Need to latch X and Y address at 0, counter reset also create latch signal in FPGA?     */
  /* Don't worry about the rolling shutter yet, just start at corner of device */
  wSetDarkPixEn(); /* Read out the dark rows first */
  wResetXYAddr();  /* Reset the X and Y addresses  */
wDelay10ns(10);  
wPulseYAddr();

  ReadRowdCDSRaw(DarkRows);
  wLowDarkPixEn(); /* Get out of dark pixel enable mode */

  /* Now read the active pixels */
  wResetXYAddr();  /* Reset the X and Y address counters - can this also create a latch in FPGA? */
wDelay10ns(10); 
wPulseYAddr();  
/*wSetAllXBlocks();*/ /* With 16 ADC inputs enable all 4 X blocks - this done in FPGA          */

  ReadRowdCDSRaw(MaxRows);  /* Go through all the rows, each raw output has 256 columns associated */

  return;
}

SEQUENCE ReadRowdCDSRaw {
 wLine();                   /* Trigger a new line */

 wSetRowClock();            /* Sets row clock - buffered sense node voltage driven on to column bus   */
 wDelay10ns(50);
  /*wSetClampClock();*/     /* Resets the cds capacitor to the clamp voltage                          */
  if GainHigh GOTO ResetRowHG(); /* This resets the row's sense node and sets to high gain mode, 1us width */
  if GainLow GOTO ResetRowLG();  /* This resets the row's sense node and sets to low gain mode, 1us width  */

wSetRowClock();
wDelay10ns(5);  /* Delay between reset and the ADC clamping, this is probably unnecessary */

/* We should have the reset level here and are clamping on the reset level */
 ADClamp();     /* Do a clamp for each line */
 wDelay1us(1); /* Hold for 50 us */
 ADClamp_();    /* Unclamp the ADCs         */

 wDelay1us(10);
 ReadPixRaw(256);  /* Read Reference reset level */

 wTGPulse();/* Pulse the transfer gate to move charge to sense node, 10us wide        */
 wDelay1us(10);
 ReadPixRaw(256);         /* Reads the Signal Level */

 wLowRowClock(); 

  /* The FPGA will need to handle the roll over and enable the next Y Block */
  wPulseYAddr();    /* FPGA controls DV_IN[], Y_ENABLE_BLOCK[], and Y_LATCH through counter/FPGA    */
  wDelay1us();      /* Delay between Y Latch and the reset of the first pixel which happens on next iteration */
  return;
}

/** ---------------------------------------------------------------------------
 * @fn	    Misc functions
 * @brief   Functions shared by the different readout modes
 */

SEQUENCE XferSample {
  wDelay1us();  
  wPulseXAddr(); /* Increment the X address 250 ns width          */
  return;
}

SEQUENCE ResetRowHG {
  /* Set Reset clock and MIM clock to reset the sense node */
  /* Then the MIM clock goes low and Reset remains high for high gain */ 
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(2);  /* Pulse width on MIM clock is 2us nominal */
  wLowMIMClock();
  return;
}

SEQUENCE ResetRowLG {
  /* Set Reset clock and MIM clock to reset the sense node */
  /* Then the Reset clock goes low and MIM remains high for low gain */ 
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(4);  /* Pulse width on Reset clock is 2us nominal */
  wLowResetClock();
  wDelay1us(2);
  return;
}

SEQUENCE GlobalReset {
  wSetSnapClock(); /* TG, MIM and RST apply to all the rows now */
  wSetTGClock();
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(1000);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowTGClock();
  wLowResetClock();
  wLowMIMClock();
  wLowSnapClock();
  wDelay1us(10);
  return;
}

SEQUENCE GlobalTransfer {
  wSetSnapClock(); /* TG, MIM and RST apply to all the rows now */
  if GainLow GOTO wSetMIMClock();
  if GainHigh GOTO wLowMIMClock();
  wSetTGClock();
  wDelay1us(1000);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowTGClock();
  wLowSnapClock();
  wDelay1us(10);
  return;
}

SEQUENCE RollingReset {
  wSetTGClock();
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(10);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowResetClock();
  wLowTGClock();
  wLowMIMClock();
  wDelay1us(4);
return;
}

SEQUENCE MilliSec {
  wDelay1ms();	/* This is a placeholder 1ms routine - Need to fix up */
  return;
}




/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file     cmost.seq
 * @brief    sequence file for CMOS imager 4k x 2k
 * @author   Stephen Kaye and Timothee Greffe
 * @date     2020-01-08 Initial creation
 * @modified 
 *
 */

/** ---------------------------------------------------------------------------
 * parameter definitions
 * syntax: param paramname=value
*/

param exptime=0 
param Expose=0
param mode_TrueGR=0
param mode_dCDS=0
param mode_RR=0
param mode_RR_HDR=0
param Abort=0
param DarkRows=_DARK_ROWS
param MaxRows=_MAX_ROWS
param GainLow=0
param GainHigh=1
param numsamples=_NUM_CDS_SAMPLES
param TPixel_hold=86 /* #50 */


/* There are 4 parallel outputs per 1024 pixel block.  The x address       */
/* increases to 256 and then resets, this should cover all of the columns. */


/** ---------------------------------------------------------------------------
 * @fn     SetupCmos
 * @brief  This executes on start-up and sets levels to initialize CMOS array.
 *
 */
SEQUENCE SetupCmos {
  AllLow(); /*That should happen before the VDDEN goes high and clocks are effectively going to the detector */
  wDelay1ms(5000); /* Some time for the FPGA to load its bitstream and biases to settle a bit*/
 /* GlobalReset();  */    /* Global reset of device, now roll the shutter while waiting for exp */
}

/* And we'll fall into the wait for exposure routine                      */
/* We will be doing a rolling shutter */


/** ---------------------------------------------------------------------------
 * @fn	    WaitForExposure
 * @brief   Here we wait until the host asks for an image
 */

SEQUENCE WaitForExpose {
  if Expose SelectReadoutMode();
 /* GlobalReset();*//* Apply Global Reset to the Array */          
  GOTO WaitForExpose();
}
SEQUENCE SelectReadoutMode {
  if mode_TrueGR GOTO  Start_TrueGR_Seq();
  if mode_dCDS   GOTO  Start_PseudoGR_Seq();
  if mode_RR     GOTO  Start_RR_seq();
  if mode_RR_HDR GOTO Start_RR_seq_HDR();
  GOTO WaitForExpose(); 
}

/** ---------------------------------------------------------------------------
 * @fn	    Rolling Reset
 * @brief   A first ghost frame is readout to start the sequence in the correct rolling reset state
 */
  SEQUENCE Start_RR_seq {
 Expose--;
 wLowSnapClock(); /* to address only ine row at a time */
 wLowRSTMIMClock(); 
 GlobalReset();
 RR_dCDS_Readout();
 RR_seq(Expose);
GOTO WaitForExpose();
 }
 
 SEQUENCE RR_seq {
 Expose--;

 /*SetIPIXOff();*/
  MilliSec(exptime); 
/* SetIPIXOn();*/

/* Science Frame starts here */
 RR_dCDS_Readout();
return;
 }
 

  SEQUENCE RR_dCDS_Readout {
wFrame();
  /* Read out the dark rows first */ 
 /* wSetDarkPixEn();wDelay1ms(5); */
   wResetXYAddr();/* Reset the X and Y addresses  */
   wDelay1us(1);
 /* wPulseYAddr();wDelay1us(5000); */
 /* ReadRowRR(DarkRows); */
 /* wLowDarkPixEn();wDelay1ms(5); */
 /* Now read the active pixels */
  wResetXYAddr();/* Reset the X and Y addresses  */
   wDelay1us(1);
  wPulseYAddr();wDelay1us(5);
  ReadRowRR(MaxRows);  /* Go through all the rows, each raw output has 256 columns associated */ 
 return;
 }
 
 
 SEQUENCE ReadRowRR{
 wLine();                   /* Trigger a new line */

 wSetRowClock();            /* Sets row clock - buffered sense node voltage driven on to column bus   */
 wDelay10ns(50);
                  
  if GainHigh ResetRowHGandClamp(); /* This resets the row's sense node and sets to high gain mode, 1us width */
  if GainLow ResetRowLGandClamp();  /* This resets the row's sense node and sets to low gain mode, 1us width  */


 wDelay1us(10);
 ReadPixRaw(256);  /* Read Reference reset level */

 wTGPulse_RR();/* Pulse the transfer gate to move charge to sense node, 10us wide        */
 wDelay1us(10);
 ReadPixRaw(256);         /* Reads the Signal Level */
 
 /* RollingReset(); */
 wLowRowClock(); 
 
  /* The FPGA will need to handle the roll over and enable the next Y Block */
  wPulseYAddr();    /* FPGA controls DV_IN[], Y_ENABLE_BLOCK[], and Y_LATCH through counter/FPGA    */
  wDelay1us();      /* Delay between Y Latch and the reset of the first pixel which happens on next iteration */
  return;
 }
 
 
 /** ---------------------------------------------------------------------------
 * @fn	    Rolling Reset HDR with Dual readout
 * @brief   A first ghost frame is readout to start the sequence in the correct rolling reset state
 */
 SEQUENCE Start_RR_seq_HDR {
 Expose--;
 wLowSnapClock(); /* to address only ine row at a time */
 wLowRSTMIMClock(); 
 GlobalReset();
 RR_dCDS_Readout_HDR();
 RR_seq_HDR(Expose);
GOTO WaitForExpose();
 }
 
 SEQUENCE RR_seq_HDR {
 Expose--;

 /*SetIPIXOff();*/
  MilliSec(exptime); 
/* SetIPIXOn();*/

/* Science Frame starts here */
 RR_dCDS_Readout_HDR();
return;
 }
 

  SEQUENCE RR_dCDS_Readout_HDR {
wFrame();
  /* Read out the dark rows first */ 
 /* wSetDarkPixEn();wDelay1ms(5); */
   wResetXYAddr();/* Reset the X and Y addresses  */
   wDelay1us(1);
 /* wPulseYAddr();wDelay1us(5000); */
 /* ReadRowRR(DarkRows); */
 /* wLowDarkPixEn();wDelay1ms(5); */
 /* Now read the active pixels */
  wResetXYAddr();/* Reset the X and Y addresses  */
   wDelay1us(1);
  wPulseYAddr();wDelay1us(5);
  ReadRowRR_HDR(MaxRows);  /* Go through all the rows, each raw output has 256 columns associated */ 
 return;
 }
 
 
 SEQUENCE ReadRowRR_HDR{
 wLine();                   /* Trigger a new line */

 wSetRowClock();            /* Sets row clock - buffered sense node voltage driven on to column bus   */
 wDelay10ns(50);
                  
  ResetRowLGandClamp(); /* This resets the row's sense node and sets to high gain mode, 1us width */
  wDelay1us(10);
  ReadPixRaw(256);  /* Read Reference reset level in Low gain mode */

  wLowMIMClock(); 
  wDelay1us(10);
  ReadPixRaw(256);  /* Read Reference reset level in High gain mode */ 
  
 wTGPulse_RR();/* Pulse the transfer gate to move charge to sense node, 10us wide        */
 wDelay1us(10);
 ReadPixRaw(256);         /* Reads the Signal Level in High Gain Mode*/
 
 wSetMIMClock();
 wTGPulse_RR();
 wDelay1us(10);
 
 ReadPixRaw(256);         /* Reads the Signal Level in Low Gain Mode*/
 
 /* RollingReset(); */
 wLowRowClock(); 
 
  /* The FPGA will need to handle the roll over and enable the next Y Block */
  wPulseYAddr();    /* FPGA controls DV_IN[], Y_ENABLE_BLOCK[], and Y_LATCH through counter/FPGA    */
  wDelay1us();      /* Delay between Y Latch and the reset of the first pixel which happens on next iteration */
  return;
 }
 
/** ---------------------------------------------------------------------------
 * @fn	    True Global Reset
 * @brief   Both the Reset and charge transfer are done Globally
 */ 
 
SEQUENCE Start_TrueGR_Seq {
  GlobalReset(); 
  TrueGR_Readout(Expose);
  GOTO WaitForExpose();
}

SEQUENCE TrueGR_Readout {
  Expose--;
  wLowRSTMIMClock();
  
  GlobalReset();     /* Erase the PPD and the Sense Node*/
  MilliSec(exptime); /* Wait the exposure time */
  GlobalSNReset();   /* Empty the SN */
  
  /* Start Readout of the Reset Frame */
   wFrame();
   
  wResetXYAddr();  /* Reset the X and Y address counters*/
  wDelay10ns(10); 
  wPulseYAddr();  
 
  
  wSetRowClock();
  if GainHigh ResetRowHGandClamp(); /* This resets the row's sense node and sets to high gain mode, 1us width */
  if GainLow ResetRowLGandClamp();  /* This resets the row's sense node and sets to low gain mode, 1us width  */
  wLowRowClock();
  
  ReadRowRaw(MaxRows);  /* Go through all the rows, each raw output has 256 columns associated */
  
  GlobalTransfer(); /* Charge Transfer from the PPD to the empty SN*/
  
  wResetXYAddr();  /* Reset the X and Y address counters*/
  wDelay10ns(10); 
  wPulseYAddr();  
  
  /* Start Readout of the Image Frame*/
  ReadRowRaw(MaxRows);  /* Go through all the rows, each raw output has 256 columns associated */

  return;
}

SEQUENCE ReadRowRaw {
  wLine();                  /* Trigger a new line */

 wSetRowClock();           /* Sets row clock - buffered sense node voltage driven on to column bus   */
  wDelay10ns(50);
 


 wDelay1us(1);

  ReadPixRaw(256);         /* Reads the whole X Block, FPGA will have to increment OUTPUT_MUX_ENABLE[0,1]  */
 
  wDelay1us(2);
  wLowRowClock(); 
  /* Do all the pixels and then increment the row address */
  /* The FPGA will need to handle the roll over and enable the next Y Block */
  wPulseYAddr();    /* FPGA controls DV_IN[], Y_ENABLE_BLOCK[], and Y_LATCH through counter/FPGA    */
  wDelay1us();      /* Delay between Y Latch and the reset of the first pixel which happens on next iteration */
  return;
}



/** ---------------------------------------------------------------------------
 * @fn	    Pseudo Global Reset
 * @brief   Exposure starts with a Global Reset but the rows are then readout twice with a rolling transfer.
 */

SEQUENCE Start_PseudoGR_Seq {
  PseudoGR_Readout(Expose);
  GOTO WaitForExpose();
}

SEQUENCE PseudoGR_Readout {
  Expose--;
  GlobalReset();
  MilliSec(exptime); /* Wait the exposure time */
  wFrame();
  /* Need to latch X and Y address at 0, counter reset also create latch signal in FPGA?     */
  /* Don't worry about the rolling shutter yet, just start at corner of device */
 
  wResetXYAddr();  /* Reset the X and Y addresses  */
wDelay10ns(10);  
wPulseYAddr();

  ReadRowRR(MaxRows);  /* Go through all the rows, each raw output has 256 columns associated */

  return;
}


/** ---------------------------------------------------------------------------
 * @fn	    Misc functions
 * @brief   Functions shared by the different readout modes
 */


SEQUENCE ReadPixRaw {
  wPixel();               /* start the pixel CDS samples clock */
  wPulseXAddr(); /* Increment the X address 50 ns width          */
  wDelay10ns(TPixel_hold);  /* Do nothing while getting samples of the CDS signal */
  return;
}
SEQUENCE ReadPixRaw_Blank {
  wDelay10ns(1);
  wPulseXAddr(); /* Increment the X address 50 ns width          */
  wDelay10ns(TPixel_hold);  /* Do nothing while getting samples of the CDS signal */
  return;
}

SEQUENCE ResetRowHGandClamp {
  /* Set Reset clock and MIM clock to reset the sense node */
  /* Then the MIM clock goes low and Reset remains high for high gain */ 
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(2);  /* Pulse width on MIM clock is 2us nominal */
   ADClamp();     /* Do a clamp for each line */
 wDelay1us(2); /* Hold for 50 us */
 ADClamp_();    /* Unclamp the ADCs         */
  wLowMIMClock();
  wLowResetClock();
  return;
}

SEQUENCE ResetRowLGandClamp {
  /* Set Reset clock and MIM clock to reset the sense node */
  /* Then the Reset clock goes low and MIM remains high for low gain */ 
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(4);  /* Pulse width on Reset clock is 2us nominal */
    wDelay1us(2);  /* Pulse width on MIM clock is 2us nominal */
   ADClamp();     /* Do a clamp for each line */
 wDelay1us(2); /* Hold for 50 us */
 ADClamp_();    /* Unclamp the ADCs         */
  wLowResetClock();
  wDelay1us(2);
  return;
}

SEQUENCE GlobalReset {
  wSetSnapClock(); /* TG, MIM and RST apply to all the rows now */
  wSetTGClock();
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(10);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowTGClock();
  wDelay1us(1); 
  wLowResetClock();
  wLowMIMClock();
  wLowSnapClock();
  wDelay1us(1);
  return;
}
SEQUENCE GlobalSNReset {
  wSetSnapClock(); /* TG, MIM and RST apply to all the rows now */
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(10);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowResetClock();
  wLowMIMClock();
  wLowSnapClock();
  wDelay1us(1);
  return;
}

SEQUENCE GlobalTransfer {
  wSetSnapClock(); /* TG, MIM and RST apply to all the rows now */
  if GainLow wSetMIMClock();
  if GainHigh wLowMIMClock();
  wSetTGClock();
  wDelay1us(10);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowTGClock();
  wLowSnapClock();
  wDelay1us(10);
  return;
}

SEQUENCE RollingReset {
  wSetTGClock();
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(10);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowResetClock();
  wLowTGClock();
  wLowMIMClock();
  wDelay1us(4);
return;
}

SEQUENCE ArchonClamp {
 wDelay1us();  
 ADClamp();     
 wDelay1us(5); 
 ADClamp_();
 wDelay1us(5); 
 return;
}

SEQUENCE MilliSec {
  wDelay1ms();	/* This is a placeholder 1ms routine - Need to fix up */
  return;
}

SEQUENCE AllLow {
  wLowMIMClock();
  wLowTGClock();
  wLowResetClock();
  wLowRowClock();
  wLowSnapClock();
  wLowClampClock();
  wLowXLatch();
  wLowYLatch();
  wLowSampCaps1();    
  wLowSampCaps2();    
  wLowDarkPixEn();
  return;
}

